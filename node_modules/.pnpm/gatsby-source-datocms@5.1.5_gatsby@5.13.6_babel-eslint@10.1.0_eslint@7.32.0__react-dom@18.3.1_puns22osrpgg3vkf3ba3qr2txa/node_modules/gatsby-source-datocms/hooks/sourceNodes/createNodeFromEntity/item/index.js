"use strict";

var _require = require('humps'),
    pascalize = _require.pascalize;

var _require2 = require('datocms-client'),
    camelize = _require2.camelize;

var _require3 = require('datocms-client'),
    localizedRead = _require3.localizedRead;

var buildNode = require('../utils/buildNode');

module.exports = function buildItemNode(entity, _ref) {
  var generateType = _ref.generateType;
  var type = generateType("".concat(pascalize(entity.itemType.apiKey)));
  var itemNode = buildNode(type, entity.id, function (node) {
    node.entityPayload = entity.payload;
  });
  var nodesForItemFieldsGeneratingMarkdown = entity.itemType.fields.filter(function (field) {
    return field.fieldType === 'text';
  }).flatMap(function (field) {
    var camelizedApiKey = camelize(field.apiKey);
    var mediaType = field.appearance.editor === 'markdown' ? 'text/markdown' : field.appearance.editor === 'wysiwyg' ? 'text/html' : 'text/plain';

    if (field.localized) {
      var locales = Object.keys(entity[camelizedApiKey]);
      var nodes = locales.map(function (locale) {
        return buildNode('DatoCmsTextNode', [entity.id, locale, camelizedApiKey].join('-'), function (node) {
          node.internal.mediaType = mediaType;
          node.internal.content = entity[camelizedApiKey][locale] || '';
          node.digest = entity.meta.updatedAt;
        });
      });
      return nodes;
    } else {
      var _nodes = [buildNode('DatoCmsTextNode', [entity.id, camelizedApiKey].join('-'), function (node) {
        node.internal.mediaType = mediaType;
        node.internal.content = entity[camelizedApiKey] || '';
        node.digest = entity.meta.updatedAt;
      })];
      return _nodes;
    }
  });
  return [itemNode].concat(nodesForItemFieldsGeneratingMarkdown);
};