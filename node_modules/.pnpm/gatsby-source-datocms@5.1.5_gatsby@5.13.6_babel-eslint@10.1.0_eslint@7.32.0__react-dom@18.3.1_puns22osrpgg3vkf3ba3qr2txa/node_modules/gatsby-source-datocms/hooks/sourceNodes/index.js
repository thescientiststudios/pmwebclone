"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var createNodeFromEntity = require('./createNodeFromEntity');

var destroyEntityNode = require('./destroyEntityNode');

var _require = require('../../errorMap'),
    prefixId = _require.prefixId,
    CODES = _require.CODES;

var Queue = require('promise-queue');

var _require2 = require('humps'),
    pascalize = _require2.pascalize;

var _require3 = require('../../utils'),
    getLoader = _require3.getLoader;

module.exports = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref, _ref2) {
    var actions, getNode, getNodesByType, reporter, parentSpan, schema, store, webhookBody, cache, apiToken, environment, disableLiveReload, previewMode, instancePrefix, apiUrl, pageSize, logApiCalls, errorText, loader, context, isWebhook, entityId, entityType, eventType, changesActivity, payload, _payload, queue;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            actions = _ref.actions, getNode = _ref.getNode, getNodesByType = _ref.getNodesByType, reporter = _ref.reporter, parentSpan = _ref.parentSpan, schema = _ref.schema, store = _ref.store, webhookBody = _ref.webhookBody, cache = _ref.cache;
            apiToken = _ref2.apiToken, environment = _ref2.environment, disableLiveReload = _ref2.disableLiveReload, previewMode = _ref2.previewMode, instancePrefix = _ref2.instancePrefix, apiUrl = _ref2.apiUrl, pageSize = _ref2.pageSize, logApiCalls = _ref2.logApiCalls;

            if (!apiToken) {
              errorText = "API token must be provided!";
              reporter.panic({
                id: prefixId(CODES.MissingAPIToken),
                context: {
                  sourceMessage: errorText
                }
              }, new Error(errorText));
            }

            _context2.next = 5;
            return getLoader({
              cache: cache,
              apiToken: apiToken,
              previewMode: previewMode,
              environment: environment,
              apiUrl: apiUrl,
              pageSize: pageSize,
              logApiCalls: logApiCalls,
              // we assume that whenever `sourceNodes` is called, `createSchemaCustomization` has
              // already been called, so we can simply load from cache
              loadStateFromCache: true
            });

          case 5:
            loader = _context2.sent;
            context = {
              entitiesRepo: loader.entitiesRepo,
              actions: actions,
              getNode: getNode,
              getNodesByType: getNodesByType,
              schema: schema,
              store: store,
              cache: cache,
              previewMode: previewMode,
              generateType: function generateType(type) {
                return "DatoCms".concat(instancePrefix ? pascalize(instancePrefix) : '').concat(type);
              }
            }; // we need this both for Gatsby CMS Preview and live reload on local development

            loader.entitiesRepo.addUpsertListener(function (entity) {
              createNodeFromEntity(entity, context);
            });
            loader.entitiesRepo.addDestroyListener(function (entity) {
              destroyEntityNode(entity, context);
            });
            isWebhook = webhookBody && Object.keys(webhookBody).length > 0;

            if (!isWebhook) {
              _context2.next = 46;
              break;
            }

            entityId = webhookBody.entity_id, entityType = webhookBody.entity_type, eventType = webhookBody.event_type;
            reporter.info("Received ".concat(eventType, " event for ").concat(entityType, " ").concat(entityId, " from DatoCMS"));
            changesActivity = reporter.activityTimer("loading DatoCMS content changes", {
              parentSpan: parentSpan
            });
            changesActivity.start();
            _context2.prev = 15;
            _context2.t0 = entityType;
            _context2.next = _context2.t0 === 'item' ? 19 : _context2.t0 === 'upload' ? 28 : 37;
            break;

          case 19:
            if (!['publish', 'update', 'create'].includes(eventType)) {
              _context2.next = 26;
              break;
            }

            _context2.next = 22;
            return loader.client.items.find(entityId, {
              version: previewMode ? 'current' : 'published',
              include: 'nested_items'
            }, {
              deserializeResponse: false
            });

          case 22:
            payload = _context2.sent;
            loader.entitiesRepo.upsertEntities(payload);
            _context2.next = 27;
            break;

          case 26:
            if (['unpublish', 'delete'].includes(eventType)) {
              loader.entitiesRepo.destroyEntities('item', [entityId]);
            } else {
              reporter.warn("Invalid event type ".concat(eventType));
            }

          case 27:
            return _context2.abrupt("break", 39);

          case 28:
            if (!['create', 'update'].includes(eventType)) {
              _context2.next = 35;
              break;
            }

            _context2.next = 31;
            return loader.client.uploads.find(entityId, {}, {
              deserializeResponse: false
            });

          case 31:
            _payload = _context2.sent;
            loader.entitiesRepo.upsertEntities(_payload);
            _context2.next = 36;
            break;

          case 35:
            if (['delete'].includes(eventType)) {
              loader.entitiesRepo.destroyEntities('upload', [entityId]);
            } else {
              reporter.warn("Invalid event type ".concat(eventType));
            }

          case 36:
            return _context2.abrupt("break", 39);

          case 37:
            reporter.warn("Invalid entity type ".concat(entityType));
            return _context2.abrupt("break", 39);

          case 39:
            _context2.next = 44;
            break;

          case 41:
            _context2.prev = 41;
            _context2.t1 = _context2["catch"](15);

            if (instancePrefix) {
              reporter.info("Could not find ".concat(entityType, " ").concat(entityId, " in ").concat(instancePrefix, ". The item might belong to another DatoCMS instance."));
            } else {
              reporter.panicBuild(_context2.t1);
            }

          case 44:
            changesActivity.end();
            return _context2.abrupt("return");

          case 46:
            Object.keys(loader.entitiesRepo.entities).forEach(function (entityType) {
              loader.entitiesRepo.findEntitiesOfType(entityType).forEach(function (entity) {
                createNodeFromEntity(entity, context);
              });
            });

            if (process.env.NODE_ENV !== "production" && !disableLiveReload) {
              queue = new Queue(1, Infinity);
              loader.watch(function (loadPromise) {
                queue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  var activity;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          activity = reporter.activityTimer("detected change in DatoCMS content, loading new data", {
                            parentSpan: parentSpan
                          });
                          activity.start();
                          _context.next = 4;
                          return loadPromise;

                        case 4:
                          activity.end();

                        case 5:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));
              });
            }

          case 48:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[15, 41]]);
  }));

  return function (_x, _x2) {
    return _ref3.apply(this, arguments);
  };
}();