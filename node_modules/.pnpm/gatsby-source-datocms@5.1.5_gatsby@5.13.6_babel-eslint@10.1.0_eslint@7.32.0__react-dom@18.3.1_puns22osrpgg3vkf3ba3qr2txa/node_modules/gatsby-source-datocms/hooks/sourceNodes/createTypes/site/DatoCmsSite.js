"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('datocms-client'),
    localizedRead = _require.localizedRead;

function getI18n(args, context, info, mainLocale) {
  if (args.locale) {
    context.sourceDatocms.getQueryContext(context).localeState.set(info, args.locale);
  }

  if (args.fallbackLocales) {
    context.sourceDatocms.getQueryContext(context).fallbackLocalesState.set(info, args.fallbackLocales);
  }

  var locale = context.sourceDatocms.getQueryContext(context).localeState.get(info) || mainLocale;
  return {
    locale: locale,
    fallbacks: _defineProperty({}, locale, context.sourceDatocms.getQueryContext(context).fallbackLocalesState.get(info) || [])
  };
}

var resolveUsingEntityPayloadAttribute = function resolveUsingEntityPayloadAttribute(key, definition) {
  var camelize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return _objectSpread({}, definition, {
    resolve: function resolve(node) {
      return camelize ? camelizeKeys(node.entityPayload.attributes[key]) : node.entityPayload.attributes[key];
    }
  });
};

module.exports = function (_ref) {
  var actions = _ref.actions,
      schema = _ref.schema,
      generateType = _ref.generateType;
  actions.createTypes([schema.buildObjectType({
    name: generateType('Site'),
    extensions: {
      infer: false
    },
    fields: {
      name: resolveUsingEntityPayloadAttribute('name', {
        type: 'String'
      }),
      locales: resolveUsingEntityPayloadAttribute('locales', {
        type: '[String!]!'
      }),
      domain: resolveUsingEntityPayloadAttribute('domain', {
        type: 'String'
      }),
      internalDomain: resolveUsingEntityPayloadAttribute('internal_domain', {
        type: 'String!'
      }),
      noIndex: resolveUsingEntityPayloadAttribute('no_index', {
        type: 'Boolean'
      }),
      globalSeo: {
        type: generateType('GlobalSeo'),
        args: {
          locale: "String",
          fallbackLocales: "[String!]"
        },
        resolve: function resolve(node, args, context, info) {
          var i18n = getI18n(args, context, info, node.entityPayload.attributes.locales[0]);
          var result = localizedRead(node.entityPayload.attributes, 'global_seo', node.entityPayload.attributes.locales.length > 1, i18n);
          return result;
        }
      },
      faviconMetaTags: {
        type: 'DatoCmsFaviconMetaTags',
        resolve: function resolve(node) {
          return node.faviconMetaTags;
        }
      },
      originalId: {
        type: 'String!',
        resolve: function resolve(node) {
          return node.entityPayload.id;
        }
      }
    },
    interfaces: ['Node']
  })]);
};