{"version":3,"sources":["../../src/components/TransitionObserver.js"],"names":["TransitionObserver","props","innerRef","context","publicContext","contextState","updateContextState","observing","setObserving","observerSupport","window","IntersectionObserverEntry","prototype","current","observer","options","threshold","IntersectionObserver","observed","thisObserved","intersectionRatio","observe","unobserve","forceRender","transitionStatus","children"],"mappings":";;;;;AAAA;;AAEA;;AAEA,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AAClC,QAAMC,QAAQ,GAAG,mBAAO,IAAP,CAAjB;AACA,QAAMC,OAAO,GAAG,uBAAWC,sCAAX,CAAhB;AACA,QAAM,CAACC,YAAD,EAAeC,kBAAf,IAAqC,qBAAS,IAAT,CAA3C;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAAS,KAAT,CAAlC;AAEA,QAAMC,eAAe,GACpB,0BAA0BC,MAA1B,IACA,+BAA+BA,MAD/B,IAEA,uBAAuBA,MAAM,CAACC,yBAAP,CAAiCC,SAHzD;AAKA,wBAAU,MAAM;AACf,QAAIV,QAAQ,IAAIA,QAAQ,CAACW,OAAzB,EAAkC;AACjC,UAAIC,QAAJ;AAEA,YAAMC,OAAO,GAAG;AACfC,QAAAA,SAAS,EAAE;AADI,OAAhB;AAIAF,MAAAA,QAAQ,GAAG,IAAIG,oBAAJ,CAAyBC,QAAQ,IAAI;AAC/C,cAAM,CAACC,YAAD,IAAiBD,QAAvB;AACAV,QAAAA,YAAY,CAAC,CAAC,CAACW,YAAY,CAACC,iBAAhB,CAAZ;AACA,OAHU,EAGRL,OAHQ,CAAX;AAIAD,MAAAA,QAAQ,CAACO,OAAT,CAAiBnB,QAAQ,CAACW,OAA1B;AAEA,aAAO,MAAMC,QAAQ,CAACQ,SAAT,CAAmBpB,QAAQ,CAACW,OAA5B,CAAb;AACA;AACD,GAhBD,EAgBG,CAACX,QAAD,CAhBH;AAkBA,wBAAU,MAAM;AACf,QAAI,CAACO,eAAD,IAAoBR,KAAK,CAACsB,WAA9B,EAA2C;AAC1C;AACA;AACAjB,MAAAA,kBAAkB,CAACH,OAAD,CAAlB;AACA,KAJD,MAIO,IAAII,SAAJ,EAAe;AACrBD,MAAAA,kBAAkB,CAACH,OAAD,CAAlB;AACA;AACD,GARD,EAQG,CAACA,OAAO,CAACqB,gBAAT,EAA2BtB,QAA3B,EAAqCK,SAArC,CARH;AAUA,SAAON,KAAK,CAACwB,QAAN,CAAepB,YAAf,EAA6BH,QAA7B,CAAP;AACA;;eAEcF,kB","sourcesContent":["import { useRef, useContext, useEffect, useState } from 'react'\n\nimport { publicContext } from '../context/createTransitionContext'\n\nfunction TransitionObserver(props) {\n\tconst innerRef = useRef(null)\n\tconst context = useContext(publicContext)\n\tconst [contextState, updateContextState] = useState(null)\n\tconst [observing, setObserving] = useState(false)\n\n\tconst observerSupport =\n\t\t'IntersectionObserver' in window &&\n\t\t'IntersectionObserverEntry' in window &&\n\t\t'intersectionRatio' in window.IntersectionObserverEntry.prototype\n\n\tuseEffect(() => {\n\t\tif (innerRef && innerRef.current) {\n\t\t\tlet observer\n\n\t\t\tconst options = {\n\t\t\t\tthreshold: 1,\n\t\t\t}\n\n\t\t\tobserver = new IntersectionObserver(observed => {\n\t\t\t\tconst [thisObserved] = observed\n\t\t\t\tsetObserving(!!thisObserved.intersectionRatio)\n\t\t\t}, options)\n\t\t\tobserver.observe(innerRef.current)\n\n\t\t\treturn () => observer.unobserve(innerRef.current)\n\t\t}\n\t}, [innerRef])\n\n\tuseEffect(() => {\n\t\tif (!observerSupport || props.forceRender) {\n\t\t\t// always update the context if there is no intersection\n\t\t\t// observer support or if the prop forceRender is set to true\n\t\t\tupdateContextState(context)\n\t\t} else if (observing) {\n\t\t\tupdateContextState(context)\n\t\t}\n\t}, [context.transitionStatus, innerRef, observing])\n\n\treturn props.children(contextState, innerRef)\n}\n\nexport default TransitionObserver\n"],"file":"TransitionObserver.js"}