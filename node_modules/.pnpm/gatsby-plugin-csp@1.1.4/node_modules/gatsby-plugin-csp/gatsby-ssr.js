"use strict";

const React = require("react");

const flatten = require("lodash.flatten");

const _require = require("./utils"),
      computeHash = _require.computeHash,
      cspString = _require.cspString,
      getHashes = _require.getHashes,
      defaultDirectives = _require.defaultDirectives;

exports.onPreRenderHTML = ({
  getHeadComponents,
  replaceHeadComponents,
  getPreBodyComponents,
  getPostBodyComponents
}, userPluginOptions) => {
  const _userPluginOptions$di = userPluginOptions.disableOnDev,
        disableOnDev = _userPluginOptions$di === void 0 ? true : _userPluginOptions$di,
        _userPluginOptions$re = userPluginOptions.reportOnly,
        reportOnly = _userPluginOptions$re === void 0 ? false : _userPluginOptions$re,
        _userPluginOptions$me = userPluginOptions.mergeScriptHashes,
        mergeScriptHashes = _userPluginOptions$me === void 0 ? true : _userPluginOptions$me,
        _userPluginOptions$me2 = userPluginOptions.mergeStyleHashes,
        mergeStyleHashes = _userPluginOptions$me2 === void 0 ? true : _userPluginOptions$me2,
        _userPluginOptions$me3 = userPluginOptions.mergeDefaultDirectives,
        mergeDefaultDirectives = _userPluginOptions$me3 === void 0 ? true : _userPluginOptions$me3,
        userDirectives = userPluginOptions.directives; // early return if plugin is disabled on dev env

  if (process.env.NODE_ENV === "development" && disableOnDev) {
    return;
  }

  let components = [...flatten(getHeadComponents()), ...flatten(getPostBodyComponents()), ...flatten(getPreBodyComponents())];
  let directives = Object.assign({}, mergeDefaultDirectives && defaultDirectives, userDirectives);
  let csp = Object.assign({}, directives, mergeScriptHashes && {
    "script-src": `${directives["script-src"] || ""} ${getHashes(components, "script")}`
  }, mergeStyleHashes && {
    "style-src": `${directives["style-src"] || ""} ${getHashes(components, "style")}`
  });
  const cspComponent = React.createElement("meta", {
    key: "gatsby-plugin-csp",
    httpEquiv: `${reportOnly ? "Content-Security-Policy-Report-Only" : "Content-Security-Policy"}`,
    content: cspString(csp)
  });
  let headComponentsWithCsp = [cspComponent, ...getHeadComponents()];
  replaceHeadComponents(headComponentsWithCsp);
};